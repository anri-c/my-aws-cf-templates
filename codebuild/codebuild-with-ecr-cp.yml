---
Parameters:
  RepositoryName:
    Type: "String"

Resources:
  Repository:
    Type: "AWS::ECR::Repository"
    Properties:
      RepositoryName: !Ref "RepositoryName"
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Delete more than 5 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 5
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  CodeBuildServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["codebuild.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        }
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Resource: "*"
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "ecr:GetAuthorizationToken"
                  - "codepipeline:Get*"
                  - "codebuild:BatchGetBuilds"
              - Resource: "arn:aws:s3:::*"
                Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:GetObjectVersion"
              - Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${Repository}"
                Effect: "Allow"
                Action:
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:PutImage"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:UploadLayerPart"
                  - "ecr:CompleteLayerUpload"

  ContainerBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: "ContainerBuild"
      ServiceRole: !Ref "CodeBuildServiceRole"
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: |
          version: 0.1
          phases:
            install:
              commands:
                - apt-get update && apt-get -y install python-pip python-dev
                - pip install --upgrade awscli
            pre_build:
              commands:
                - printenv
                - echo -n "$CODEBUILD_LOG_PATH" > /tmp/build_id.out
                - printf "%s:%s" "$REPOSITORY_URI" "$(cat /tmp/build_id.out)" > /tmp/build_tag.out
                - printf "%s:%s" "$REPOSITORY_URI" "latest" > /tmp/latest_tag.out
                - printf '{"tag":"%s"}' "$(cat /tmp/build_id.out)" > /tmp/build.json
                - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
            build:
               commands:
                 - docker build --tag "$(cat /tmp/build_tag.out)" -f Dockerfile .
                 - docker tag "$(cat /tmp/build_tag.out)" "$(cat /tmp/latest_tag.out)"
            post_build:
               commands:
                 - docker push "$(cat /tmp/build_tag.out)"
                 - docker push "$(cat /tmp/latest_tag.out)"
          artifacts:
            files: /tmp/build.json
            discard-paths: yes
      Environment:
        Type: "LINUX_CONTAINER"
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/docker:18.09.0"
        EnvironmentVariables:
          - Name: "DOCKER_BUILDKIT"
            Value: "1"
          - Name: "AWS_DEFAULT_REGION"
            Value: !Ref "AWS::Region"
          - Name: "REPOSITORY_URI"
            Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}"
